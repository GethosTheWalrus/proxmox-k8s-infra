---
# Pipeline will only trigger when something is pushed to main branch 
workflow:  
    rules:
      - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
        when: never
      - when: always

# List of variables
variables:
  STATE_NAME: "tf_state"
  TF_ADDRESS: "http://git.home/api/v4/projects/5/terraform/state/${STATE_NAME}"
  TF_PASSWORD: $(echo "$GITLABACCESSTOKEN" | base64 -d)
  TF_USERNAME: $(echo "$GITLABUSERNAME" | base64 -d)

# Stages of the pipeline
stages:
  - validate
  - plan
  - apply
  - destroy

# Image which will use in each stage
image:
  name: hashicorp/terraform:light
  entrypoint: [""]

# Script to be executed before each stage 
before_script:
  terraform init \
  -backend-config=address=${TF_ADDRESS} \
  -backend-config=lock_address=${TF_ADDRESS}/lock \
  -backend-config=unlock_address=${TF_ADDRESS}/lock \
  -backend-config=username=${TF_USERNAME} \
  -backend-config=password=${TF_PASSWORD} \
  -backend-config=lock_method=POST \
  -backend-config=unlock_method=DELETE \
  -backend-config=retry_wait_min=5
  
# To validate terraform files configuration
validate:
  stage: validate
  script:
    - terraform validate

# To check the plan of the infrastructure
plan:
  stage: plan
  script:
    - terraform plan 
  dependencies:              
    - validate

# To create infrastructure on AWS
apply:
  stage: apply
  script:
    - terraform apply  -auto-approve
  dependencies:              
    - plan

# To destroy infrastructure on cloud. It needs manual approval 
destroy:
  stage: destroy
  script:
    - terraform destroy  -auto-approve
  dependencies:          
    - plan
    - apply
  when: manual